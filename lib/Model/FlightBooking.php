<?php
/**
 * FlightBooking
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightBooking Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightBooking implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlightBooking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'airlines' => '\Swagger\Client\Model\FlightAirline[]',
'booking_can_be_void' => 'bool',
'booking_class' => 'string',
'booking_date' => 'string',
'booking_need_exchange_documents' => 'bool',
'bounds' => '\Swagger\Client\Model\FlightBookingBounds[]',
'canceled' => 'bool',
'confirmed' => 'bool',
'could_not_retrieve_etickets' => 'bool',
'customer' => '\Swagger\Client\Model\FlightBookingCustomer',
'customer_id' => 'int',
'destination' => 'string',
'etickets' => '\Swagger\Client\Model\FlightBookingEtickets[]',
'history' => '\Swagger\Client\Model\FlightBookingHistory[]',
'modified' => 'bool',
'offline' => 'bool',
'option_deadline' => 'string',
'origin' => 'string',
'pax_number' => 'int',
'pending' => 'bool',
'pnr' => 'string',
'price' => '\Swagger\Client\Model\FlightDetailedPrice',
'provider' => 'string',
'queued' => 'bool',
'reference' => 'string',
'refund' => '\Swagger\Client\Model\FlightDetailedPrice',
'routing' => 'string',
'status' => 'string',
'ticketed' => 'bool',
'trip_type' => 'string',
'validating_carrier' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'airlines' => null,
'booking_can_be_void' => null,
'booking_class' => null,
'booking_date' => null,
'booking_need_exchange_documents' => null,
'bounds' => null,
'canceled' => null,
'confirmed' => null,
'could_not_retrieve_etickets' => null,
'customer' => null,
'customer_id' => null,
'destination' => null,
'etickets' => null,
'history' => null,
'modified' => null,
'offline' => null,
'option_deadline' => 'datetime',
'origin' => null,
'pax_number' => null,
'pending' => null,
'pnr' => null,
'price' => null,
'provider' => null,
'queued' => null,
'reference' => null,
'refund' => null,
'routing' => null,
'status' => null,
'ticketed' => null,
'trip_type' => null,
'validating_carrier' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'airlines' => 'airlines',
'booking_can_be_void' => 'booking_can_be_void',
'booking_class' => 'booking_class',
'booking_date' => 'booking_date',
'booking_need_exchange_documents' => 'booking_need_exchange_documents',
'bounds' => 'bounds',
'canceled' => 'canceled',
'confirmed' => 'confirmed',
'could_not_retrieve_etickets' => 'could_not_retrieve_etickets',
'customer' => 'customer',
'customer_id' => 'customer_id',
'destination' => 'destination',
'etickets' => 'etickets',
'history' => 'history',
'modified' => 'modified',
'offline' => 'offline',
'option_deadline' => 'option_deadline',
'origin' => 'origin',
'pax_number' => 'pax_number',
'pending' => 'pending',
'pnr' => 'pnr',
'price' => 'price',
'provider' => 'provider',
'queued' => 'queued',
'reference' => 'reference',
'refund' => 'refund',
'routing' => 'routing',
'status' => 'status',
'ticketed' => 'ticketed',
'trip_type' => 'trip_type',
'validating_carrier' => 'validating_carrier'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'airlines' => 'setAirlines',
'booking_can_be_void' => 'setBookingCanBeVoid',
'booking_class' => 'setBookingClass',
'booking_date' => 'setBookingDate',
'booking_need_exchange_documents' => 'setBookingNeedExchangeDocuments',
'bounds' => 'setBounds',
'canceled' => 'setCanceled',
'confirmed' => 'setConfirmed',
'could_not_retrieve_etickets' => 'setCouldNotRetrieveEtickets',
'customer' => 'setCustomer',
'customer_id' => 'setCustomerId',
'destination' => 'setDestination',
'etickets' => 'setEtickets',
'history' => 'setHistory',
'modified' => 'setModified',
'offline' => 'setOffline',
'option_deadline' => 'setOptionDeadline',
'origin' => 'setOrigin',
'pax_number' => 'setPaxNumber',
'pending' => 'setPending',
'pnr' => 'setPnr',
'price' => 'setPrice',
'provider' => 'setProvider',
'queued' => 'setQueued',
'reference' => 'setReference',
'refund' => 'setRefund',
'routing' => 'setRouting',
'status' => 'setStatus',
'ticketed' => 'setTicketed',
'trip_type' => 'setTripType',
'validating_carrier' => 'setValidatingCarrier'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'airlines' => 'getAirlines',
'booking_can_be_void' => 'getBookingCanBeVoid',
'booking_class' => 'getBookingClass',
'booking_date' => 'getBookingDate',
'booking_need_exchange_documents' => 'getBookingNeedExchangeDocuments',
'bounds' => 'getBounds',
'canceled' => 'getCanceled',
'confirmed' => 'getConfirmed',
'could_not_retrieve_etickets' => 'getCouldNotRetrieveEtickets',
'customer' => 'getCustomer',
'customer_id' => 'getCustomerId',
'destination' => 'getDestination',
'etickets' => 'getEtickets',
'history' => 'getHistory',
'modified' => 'getModified',
'offline' => 'getOffline',
'option_deadline' => 'getOptionDeadline',
'origin' => 'getOrigin',
'pax_number' => 'getPaxNumber',
'pending' => 'getPending',
'pnr' => 'getPnr',
'price' => 'getPrice',
'provider' => 'getProvider',
'queued' => 'getQueued',
'reference' => 'getReference',
'refund' => 'getRefund',
'routing' => 'getRouting',
'status' => 'getStatus',
'ticketed' => 'getTicketed',
'trip_type' => 'getTripType',
'validating_carrier' => 'getValidatingCarrier'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['airlines'] = isset($data['airlines']) ? $data['airlines'] : null;
        $this->container['booking_can_be_void'] = isset($data['booking_can_be_void']) ? $data['booking_can_be_void'] : null;
        $this->container['booking_class'] = isset($data['booking_class']) ? $data['booking_class'] : null;
        $this->container['booking_date'] = isset($data['booking_date']) ? $data['booking_date'] : null;
        $this->container['booking_need_exchange_documents'] = isset($data['booking_need_exchange_documents']) ? $data['booking_need_exchange_documents'] : null;
        $this->container['bounds'] = isset($data['bounds']) ? $data['bounds'] : null;
        $this->container['canceled'] = isset($data['canceled']) ? $data['canceled'] : null;
        $this->container['confirmed'] = isset($data['confirmed']) ? $data['confirmed'] : null;
        $this->container['could_not_retrieve_etickets'] = isset($data['could_not_retrieve_etickets']) ? $data['could_not_retrieve_etickets'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['etickets'] = isset($data['etickets']) ? $data['etickets'] : null;
        $this->container['history'] = isset($data['history']) ? $data['history'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['offline'] = isset($data['offline']) ? $data['offline'] : null;
        $this->container['option_deadline'] = isset($data['option_deadline']) ? $data['option_deadline'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['pax_number'] = isset($data['pax_number']) ? $data['pax_number'] : null;
        $this->container['pending'] = isset($data['pending']) ? $data['pending'] : null;
        $this->container['pnr'] = isset($data['pnr']) ? $data['pnr'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['queued'] = isset($data['queued']) ? $data['queued'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['refund'] = isset($data['refund']) ? $data['refund'] : null;
        $this->container['routing'] = isset($data['routing']) ? $data['routing'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['ticketed'] = isset($data['ticketed']) ? $data['ticketed'] : null;
        $this->container['trip_type'] = isset($data['trip_type']) ? $data['trip_type'] : null;
        $this->container['validating_carrier'] = isset($data['validating_carrier']) ? $data['validating_carrier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets airlines
     *
     * @return \Swagger\Client\Model\FlightAirline[]
     */
    public function getAirlines()
    {
        return $this->container['airlines'];
    }

    /**
     * Sets airlines
     *
     * @param \Swagger\Client\Model\FlightAirline[] $airlines airlines
     *
     * @return $this
     */
    public function setAirlines($airlines)
    {
        $this->container['airlines'] = $airlines;

        return $this;
    }

    /**
     * Gets booking_can_be_void
     *
     * @return bool
     */
    public function getBookingCanBeVoid()
    {
        return $this->container['booking_can_be_void'];
    }

    /**
     * Sets booking_can_be_void
     *
     * @param bool $booking_can_be_void booking_can_be_void
     *
     * @return $this
     */
    public function setBookingCanBeVoid($booking_can_be_void)
    {
        $this->container['booking_can_be_void'] = $booking_can_be_void;

        return $this;
    }

    /**
     * Gets booking_class
     *
     * @return string
     */
    public function getBookingClass()
    {
        return $this->container['booking_class'];
    }

    /**
     * Sets booking_class
     *
     * @param string $booking_class booking_class
     *
     * @return $this
     */
    public function setBookingClass($booking_class)
    {
        $this->container['booking_class'] = $booking_class;

        return $this;
    }

    /**
     * Gets booking_date
     *
     * @return string
     */
    public function getBookingDate()
    {
        return $this->container['booking_date'];
    }

    /**
     * Sets booking_date
     *
     * @param string $booking_date booking_date
     *
     * @return $this
     */
    public function setBookingDate($booking_date)
    {
        $this->container['booking_date'] = $booking_date;

        return $this;
    }

    /**
     * Gets booking_need_exchange_documents
     *
     * @return bool
     */
    public function getBookingNeedExchangeDocuments()
    {
        return $this->container['booking_need_exchange_documents'];
    }

    /**
     * Sets booking_need_exchange_documents
     *
     * @param bool $booking_need_exchange_documents booking_need_exchange_documents
     *
     * @return $this
     */
    public function setBookingNeedExchangeDocuments($booking_need_exchange_documents)
    {
        $this->container['booking_need_exchange_documents'] = $booking_need_exchange_documents;

        return $this;
    }

    /**
     * Gets bounds
     *
     * @return \Swagger\Client\Model\FlightBookingBounds[]
     */
    public function getBounds()
    {
        return $this->container['bounds'];
    }

    /**
     * Sets bounds
     *
     * @param \Swagger\Client\Model\FlightBookingBounds[] $bounds bounds
     *
     * @return $this
     */
    public function setBounds($bounds)
    {
        $this->container['bounds'] = $bounds;

        return $this;
    }

    /**
     * Gets canceled
     *
     * @return bool
     */
    public function getCanceled()
    {
        return $this->container['canceled'];
    }

    /**
     * Sets canceled
     *
     * @param bool $canceled canceled
     *
     * @return $this
     */
    public function setCanceled($canceled)
    {
        $this->container['canceled'] = $canceled;

        return $this;
    }

    /**
     * Gets confirmed
     *
     * @return bool
     */
    public function getConfirmed()
    {
        return $this->container['confirmed'];
    }

    /**
     * Sets confirmed
     *
     * @param bool $confirmed confirmed
     *
     * @return $this
     */
    public function setConfirmed($confirmed)
    {
        $this->container['confirmed'] = $confirmed;

        return $this;
    }

    /**
     * Gets could_not_retrieve_etickets
     *
     * @return bool
     */
    public function getCouldNotRetrieveEtickets()
    {
        return $this->container['could_not_retrieve_etickets'];
    }

    /**
     * Sets could_not_retrieve_etickets
     *
     * @param bool $could_not_retrieve_etickets could_not_retrieve_etickets
     *
     * @return $this
     */
    public function setCouldNotRetrieveEtickets($could_not_retrieve_etickets)
    {
        $this->container['could_not_retrieve_etickets'] = $could_not_retrieve_etickets;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Swagger\Client\Model\FlightBookingCustomer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Swagger\Client\Model\FlightBookingCustomer $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string $destination destination
     *
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets etickets
     *
     * @return \Swagger\Client\Model\FlightBookingEtickets[]
     */
    public function getEtickets()
    {
        return $this->container['etickets'];
    }

    /**
     * Sets etickets
     *
     * @param \Swagger\Client\Model\FlightBookingEtickets[] $etickets etickets
     *
     * @return $this
     */
    public function setEtickets($etickets)
    {
        $this->container['etickets'] = $etickets;

        return $this;
    }

    /**
     * Gets history
     *
     * @return \Swagger\Client\Model\FlightBookingHistory[]
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \Swagger\Client\Model\FlightBookingHistory[] $history history
     *
     * @return $this
     */
    public function setHistory($history)
    {
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return bool
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param bool $modified modified
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets offline
     *
     * @return bool
     */
    public function getOffline()
    {
        return $this->container['offline'];
    }

    /**
     * Sets offline
     *
     * @param bool $offline offline
     *
     * @return $this
     */
    public function setOffline($offline)
    {
        $this->container['offline'] = $offline;

        return $this;
    }

    /**
     * Gets option_deadline
     *
     * @return string
     */
    public function getOptionDeadline()
    {
        return $this->container['option_deadline'];
    }

    /**
     * Sets option_deadline
     *
     * @param string $option_deadline option_deadline
     *
     * @return $this
     */
    public function setOptionDeadline($option_deadline)
    {
        $this->container['option_deadline'] = $option_deadline;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets pax_number
     *
     * @return int
     */
    public function getPaxNumber()
    {
        return $this->container['pax_number'];
    }

    /**
     * Sets pax_number
     *
     * @param int $pax_number pax_number
     *
     * @return $this
     */
    public function setPaxNumber($pax_number)
    {
        $this->container['pax_number'] = $pax_number;

        return $this;
    }

    /**
     * Gets pending
     *
     * @return bool
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     *
     * @param bool $pending pending
     *
     * @return $this
     */
    public function setPending($pending)
    {
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets pnr
     *
     * @return string
     */
    public function getPnr()
    {
        return $this->container['pnr'];
    }

    /**
     * Sets pnr
     *
     * @param string $pnr pnr
     *
     * @return $this
     */
    public function setPnr($pnr)
    {
        $this->container['pnr'] = $pnr;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Swagger\Client\Model\FlightDetailedPrice
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Swagger\Client\Model\FlightDetailedPrice $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider provider
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets queued
     *
     * @return bool
     */
    public function getQueued()
    {
        return $this->container['queued'];
    }

    /**
     * Sets queued
     *
     * @param bool $queued queued
     *
     * @return $this
     */
    public function setQueued($queued)
    {
        $this->container['queued'] = $queued;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets refund
     *
     * @return \Swagger\Client\Model\FlightDetailedPrice
     */
    public function getRefund()
    {
        return $this->container['refund'];
    }

    /**
     * Sets refund
     *
     * @param \Swagger\Client\Model\FlightDetailedPrice $refund refund
     *
     * @return $this
     */
    public function setRefund($refund)
    {
        $this->container['refund'] = $refund;

        return $this;
    }

    /**
     * Gets routing
     *
     * @return string
     */
    public function getRouting()
    {
        return $this->container['routing'];
    }

    /**
     * Sets routing
     *
     * @param string $routing routing
     *
     * @return $this
     */
    public function setRouting($routing)
    {
        $this->container['routing'] = $routing;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ticketed
     *
     * @return bool
     */
    public function getTicketed()
    {
        return $this->container['ticketed'];
    }

    /**
     * Sets ticketed
     *
     * @param bool $ticketed ticketed
     *
     * @return $this
     */
    public function setTicketed($ticketed)
    {
        $this->container['ticketed'] = $ticketed;

        return $this;
    }

    /**
     * Gets trip_type
     *
     * @return string
     */
    public function getTripType()
    {
        return $this->container['trip_type'];
    }

    /**
     * Sets trip_type
     *
     * @param string $trip_type trip_type
     *
     * @return $this
     */
    public function setTripType($trip_type)
    {
        $this->container['trip_type'] = $trip_type;

        return $this;
    }

    /**
     * Gets validating_carrier
     *
     * @return string
     */
    public function getValidatingCarrier()
    {
        return $this->container['validating_carrier'];
    }

    /**
     * Sets validating_carrier
     *
     * @param string $validating_carrier validating_carrier
     *
     * @return $this
     */
    public function setValidatingCarrier($validating_carrier)
    {
        $this->container['validating_carrier'] = $validating_carrier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
