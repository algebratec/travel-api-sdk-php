<?php
/**
 * FlightAvailabilitySegment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightAvailabilitySegment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightAvailabilitySegment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlightAvailabilitySegment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'arrival' => '\Swagger\Client\Model\FlightDepartureAndArrivale',
'day_difference' => 'int',
'departure' => '\Swagger\Client\Model\FlightDepartureAndArrivale',
'equipment_type' => 'string',
'flight_ortrain_number' => 'string',
'marketing_carrier' => 'string',
'operating_carrier' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'arrival' => null,
'day_difference' => null,
'departure' => null,
'equipment_type' => null,
'flight_ortrain_number' => null,
'marketing_carrier' => null,
'operating_carrier' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arrival' => 'arrival',
'day_difference' => 'dayDifference',
'departure' => 'departure',
'equipment_type' => 'equipmentType',
'flight_ortrain_number' => 'flightOrtrainNumber',
'marketing_carrier' => 'marketingCarrier',
'operating_carrier' => 'operatingCarrier'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arrival' => 'setArrival',
'day_difference' => 'setDayDifference',
'departure' => 'setDeparture',
'equipment_type' => 'setEquipmentType',
'flight_ortrain_number' => 'setFlightOrtrainNumber',
'marketing_carrier' => 'setMarketingCarrier',
'operating_carrier' => 'setOperatingCarrier'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arrival' => 'getArrival',
'day_difference' => 'getDayDifference',
'departure' => 'getDeparture',
'equipment_type' => 'getEquipmentType',
'flight_ortrain_number' => 'getFlightOrtrainNumber',
'marketing_carrier' => 'getMarketingCarrier',
'operating_carrier' => 'getOperatingCarrier'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arrival'] = isset($data['arrival']) ? $data['arrival'] : null;
        $this->container['day_difference'] = isset($data['day_difference']) ? $data['day_difference'] : null;
        $this->container['departure'] = isset($data['departure']) ? $data['departure'] : null;
        $this->container['equipment_type'] = isset($data['equipment_type']) ? $data['equipment_type'] : null;
        $this->container['flight_ortrain_number'] = isset($data['flight_ortrain_number']) ? $data['flight_ortrain_number'] : null;
        $this->container['marketing_carrier'] = isset($data['marketing_carrier']) ? $data['marketing_carrier'] : null;
        $this->container['operating_carrier'] = isset($data['operating_carrier']) ? $data['operating_carrier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets arrival
     *
     * @return \Swagger\Client\Model\FlightDepartureAndArrivale
     */
    public function getArrival()
    {
        return $this->container['arrival'];
    }

    /**
     * Sets arrival
     *
     * @param \Swagger\Client\Model\FlightDepartureAndArrivale $arrival arrival
     *
     * @return $this
     */
    public function setArrival($arrival)
    {
        $this->container['arrival'] = $arrival;

        return $this;
    }

    /**
     * Gets day_difference
     *
     * @return int
     */
    public function getDayDifference()
    {
        return $this->container['day_difference'];
    }

    /**
     * Sets day_difference
     *
     * @param int $day_difference day_difference
     *
     * @return $this
     */
    public function setDayDifference($day_difference)
    {
        $this->container['day_difference'] = $day_difference;

        return $this;
    }

    /**
     * Gets departure
     *
     * @return \Swagger\Client\Model\FlightDepartureAndArrivale
     */
    public function getDeparture()
    {
        return $this->container['departure'];
    }

    /**
     * Sets departure
     *
     * @param \Swagger\Client\Model\FlightDepartureAndArrivale $departure departure
     *
     * @return $this
     */
    public function setDeparture($departure)
    {
        $this->container['departure'] = $departure;

        return $this;
    }

    /**
     * Gets equipment_type
     *
     * @return string
     */
    public function getEquipmentType()
    {
        return $this->container['equipment_type'];
    }

    /**
     * Sets equipment_type
     *
     * @param string $equipment_type equipment_type
     *
     * @return $this
     */
    public function setEquipmentType($equipment_type)
    {
        $this->container['equipment_type'] = $equipment_type;

        return $this;
    }

    /**
     * Gets flight_ortrain_number
     *
     * @return string
     */
    public function getFlightOrtrainNumber()
    {
        return $this->container['flight_ortrain_number'];
    }

    /**
     * Sets flight_ortrain_number
     *
     * @param string $flight_ortrain_number flight_ortrain_number
     *
     * @return $this
     */
    public function setFlightOrtrainNumber($flight_ortrain_number)
    {
        $this->container['flight_ortrain_number'] = $flight_ortrain_number;

        return $this;
    }

    /**
     * Gets marketing_carrier
     *
     * @return string
     */
    public function getMarketingCarrier()
    {
        return $this->container['marketing_carrier'];
    }

    /**
     * Sets marketing_carrier
     *
     * @param string $marketing_carrier marketing_carrier
     *
     * @return $this
     */
    public function setMarketingCarrier($marketing_carrier)
    {
        $this->container['marketing_carrier'] = $marketing_carrier;

        return $this;
    }

    /**
     * Gets operating_carrier
     *
     * @return string
     */
    public function getOperatingCarrier()
    {
        return $this->container['operating_carrier'];
    }

    /**
     * Sets operating_carrier
     *
     * @param string $operating_carrier operating_carrier
     *
     * @return $this
     */
    public function setOperatingCarrier($operating_carrier)
    {
        $this->container['operating_carrier'] = $operating_carrier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
