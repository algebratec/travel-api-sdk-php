<?php
/**
 * FlightFare
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightFare Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightFare implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlightFare';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_minor_single_passenger' => 'bool',
'can_be_booked_onhold' => 'bool',
'can_be_voided' => 'bool',
'is_bookable' => 'bool',
'pax_name_character_limit' => 'int',
'pax_name_character_limit_inf' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_minor_single_passenger' => null,
'can_be_booked_onhold' => null,
'can_be_voided' => null,
'is_bookable' => null,
'pax_name_character_limit' => null,
'pax_name_character_limit_inf' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_minor_single_passenger' => 'allowMinorSinglePassenger',
'can_be_booked_onhold' => 'canBeBookedOnhold',
'can_be_voided' => 'canBeVoided',
'is_bookable' => 'isBookable',
'pax_name_character_limit' => 'paxNameCharacterLimit',
'pax_name_character_limit_inf' => 'paxNameCharacterLimitINF'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_minor_single_passenger' => 'setAllowMinorSinglePassenger',
'can_be_booked_onhold' => 'setCanBeBookedOnhold',
'can_be_voided' => 'setCanBeVoided',
'is_bookable' => 'setIsBookable',
'pax_name_character_limit' => 'setPaxNameCharacterLimit',
'pax_name_character_limit_inf' => 'setPaxNameCharacterLimitInf'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_minor_single_passenger' => 'getAllowMinorSinglePassenger',
'can_be_booked_onhold' => 'getCanBeBookedOnhold',
'can_be_voided' => 'getCanBeVoided',
'is_bookable' => 'getIsBookable',
'pax_name_character_limit' => 'getPaxNameCharacterLimit',
'pax_name_character_limit_inf' => 'getPaxNameCharacterLimitInf'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_minor_single_passenger'] = isset($data['allow_minor_single_passenger']) ? $data['allow_minor_single_passenger'] : null;
        $this->container['can_be_booked_onhold'] = isset($data['can_be_booked_onhold']) ? $data['can_be_booked_onhold'] : null;
        $this->container['can_be_voided'] = isset($data['can_be_voided']) ? $data['can_be_voided'] : null;
        $this->container['is_bookable'] = isset($data['is_bookable']) ? $data['is_bookable'] : null;
        $this->container['pax_name_character_limit'] = isset($data['pax_name_character_limit']) ? $data['pax_name_character_limit'] : null;
        $this->container['pax_name_character_limit_inf'] = isset($data['pax_name_character_limit_inf']) ? $data['pax_name_character_limit_inf'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_minor_single_passenger
     *
     * @return bool
     */
    public function getAllowMinorSinglePassenger()
    {
        return $this->container['allow_minor_single_passenger'];
    }

    /**
     * Sets allow_minor_single_passenger
     *
     * @param bool $allow_minor_single_passenger allow_minor_single_passenger
     *
     * @return $this
     */
    public function setAllowMinorSinglePassenger($allow_minor_single_passenger)
    {
        $this->container['allow_minor_single_passenger'] = $allow_minor_single_passenger;

        return $this;
    }

    /**
     * Gets can_be_booked_onhold
     *
     * @return bool
     */
    public function getCanBeBookedOnhold()
    {
        return $this->container['can_be_booked_onhold'];
    }

    /**
     * Sets can_be_booked_onhold
     *
     * @param bool $can_be_booked_onhold can_be_booked_onhold
     *
     * @return $this
     */
    public function setCanBeBookedOnhold($can_be_booked_onhold)
    {
        $this->container['can_be_booked_onhold'] = $can_be_booked_onhold;

        return $this;
    }

    /**
     * Gets can_be_voided
     *
     * @return bool
     */
    public function getCanBeVoided()
    {
        return $this->container['can_be_voided'];
    }

    /**
     * Sets can_be_voided
     *
     * @param bool $can_be_voided can_be_voided
     *
     * @return $this
     */
    public function setCanBeVoided($can_be_voided)
    {
        $this->container['can_be_voided'] = $can_be_voided;

        return $this;
    }

    /**
     * Gets is_bookable
     *
     * @return bool
     */
    public function getIsBookable()
    {
        return $this->container['is_bookable'];
    }

    /**
     * Sets is_bookable
     *
     * @param bool $is_bookable is_bookable
     *
     * @return $this
     */
    public function setIsBookable($is_bookable)
    {
        $this->container['is_bookable'] = $is_bookable;

        return $this;
    }

    /**
     * Gets pax_name_character_limit
     *
     * @return int
     */
    public function getPaxNameCharacterLimit()
    {
        return $this->container['pax_name_character_limit'];
    }

    /**
     * Sets pax_name_character_limit
     *
     * @param int $pax_name_character_limit pax_name_character_limit
     *
     * @return $this
     */
    public function setPaxNameCharacterLimit($pax_name_character_limit)
    {
        $this->container['pax_name_character_limit'] = $pax_name_character_limit;

        return $this;
    }

    /**
     * Gets pax_name_character_limit_inf
     *
     * @return int
     */
    public function getPaxNameCharacterLimitInf()
    {
        return $this->container['pax_name_character_limit_inf'];
    }

    /**
     * Sets pax_name_character_limit_inf
     *
     * @param int $pax_name_character_limit_inf pax_name_character_limit_inf
     *
     * @return $this
     */
    public function setPaxNameCharacterLimitInf($pax_name_character_limit_inf)
    {
        $this->container['pax_name_character_limit_inf'] = $pax_name_character_limit_inf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
