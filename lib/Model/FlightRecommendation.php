<?php
/**
 * FlightRecommendation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightRecommendation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightRecommendation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlightRecommendation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'baggage' => '\Swagger\Client\Model\FlightBaggageAllowance',
'booking_key' => 'string',
'fare_details' => '\Swagger\Client\Model\FlightAvailabilityFareDetails[][]',
'flights' => 'int[][]',
'price' => '\Swagger\Client\Model\FlightDetailedPrice',
'sub_recommendations' => '\Swagger\Client\Model\FlightAvailabilitySubRecommendation[][]',
'validating_carrier' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'baggage' => null,
'booking_key' => null,
'fare_details' => null,
'flights' => null,
'price' => null,
'sub_recommendations' => null,
'validating_carrier' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'baggage' => 'baggage',
'booking_key' => 'bookingKey',
'fare_details' => 'fareDetails',
'flights' => 'flights',
'price' => 'price',
'sub_recommendations' => 'subRecommendations',
'validating_carrier' => 'validatingCarrier'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'baggage' => 'setBaggage',
'booking_key' => 'setBookingKey',
'fare_details' => 'setFareDetails',
'flights' => 'setFlights',
'price' => 'setPrice',
'sub_recommendations' => 'setSubRecommendations',
'validating_carrier' => 'setValidatingCarrier'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'baggage' => 'getBaggage',
'booking_key' => 'getBookingKey',
'fare_details' => 'getFareDetails',
'flights' => 'getFlights',
'price' => 'getPrice',
'sub_recommendations' => 'getSubRecommendations',
'validating_carrier' => 'getValidatingCarrier'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['baggage'] = isset($data['baggage']) ? $data['baggage'] : null;
        $this->container['booking_key'] = isset($data['booking_key']) ? $data['booking_key'] : null;
        $this->container['fare_details'] = isset($data['fare_details']) ? $data['fare_details'] : null;
        $this->container['flights'] = isset($data['flights']) ? $data['flights'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['sub_recommendations'] = isset($data['sub_recommendations']) ? $data['sub_recommendations'] : null;
        $this->container['validating_carrier'] = isset($data['validating_carrier']) ? $data['validating_carrier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets baggage
     *
     * @return \Swagger\Client\Model\FlightBaggageAllowance
     */
    public function getBaggage()
    {
        return $this->container['baggage'];
    }

    /**
     * Sets baggage
     *
     * @param \Swagger\Client\Model\FlightBaggageAllowance $baggage baggage
     *
     * @return $this
     */
    public function setBaggage($baggage)
    {
        $this->container['baggage'] = $baggage;

        return $this;
    }

    /**
     * Gets booking_key
     *
     * @return string
     */
    public function getBookingKey()
    {
        return $this->container['booking_key'];
    }

    /**
     * Sets booking_key
     *
     * @param string $booking_key booking_key
     *
     * @return $this
     */
    public function setBookingKey($booking_key)
    {
        $this->container['booking_key'] = $booking_key;

        return $this;
    }

    /**
     * Gets fare_details
     *
     * @return \Swagger\Client\Model\FlightAvailabilityFareDetails[][]
     */
    public function getFareDetails()
    {
        return $this->container['fare_details'];
    }

    /**
     * Sets fare_details
     *
     * @param \Swagger\Client\Model\FlightAvailabilityFareDetails[][] $fare_details fare_details
     *
     * @return $this
     */
    public function setFareDetails($fare_details)
    {
        $this->container['fare_details'] = $fare_details;

        return $this;
    }

    /**
     * Gets flights
     *
     * @return int[][]
     */
    public function getFlights()
    {
        return $this->container['flights'];
    }

    /**
     * Sets flights
     *
     * @param int[][] $flights flights
     *
     * @return $this
     */
    public function setFlights($flights)
    {
        $this->container['flights'] = $flights;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Swagger\Client\Model\FlightDetailedPrice
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Swagger\Client\Model\FlightDetailedPrice $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets sub_recommendations
     *
     * @return \Swagger\Client\Model\FlightAvailabilitySubRecommendation[][]
     */
    public function getSubRecommendations()
    {
        return $this->container['sub_recommendations'];
    }

    /**
     * Sets sub_recommendations
     *
     * @param \Swagger\Client\Model\FlightAvailabilitySubRecommendation[][] $sub_recommendations sub_recommendations
     *
     * @return $this
     */
    public function setSubRecommendations($sub_recommendations)
    {
        $this->container['sub_recommendations'] = $sub_recommendations;

        return $this;
    }

    /**
     * Gets validating_carrier
     *
     * @return string
     */
    public function getValidatingCarrier()
    {
        return $this->container['validating_carrier'];
    }

    /**
     * Sets validating_carrier
     *
     * @param string $validating_carrier validating_carrier
     *
     * @return $this
     */
    public function setValidatingCarrier($validating_carrier)
    {
        $this->container['validating_carrier'] = $validating_carrier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
