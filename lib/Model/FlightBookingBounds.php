<?php
/**
 * FlightBookingBounds
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightBookingBounds Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightBookingBounds implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlightBooking_bounds';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'arrival_date' => 'string',
'arrival_location' => '\Swagger\Client\Model\FlightBookingArrivalLocation',
'arrival_time' => 'string',
'booking_class' => 'string[]',
'departure_date' => 'string',
'departure_location' => '\Swagger\Client\Model\FlightBookingArrivalLocation',
'departure_time' => 'string',
'destination' => 'string',
'origin' => 'string',
'segments' => '\Swagger\Client\Model\FlightBookingSegments[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'arrival_date' => null,
'arrival_location' => null,
'arrival_time' => null,
'booking_class' => null,
'departure_date' => null,
'departure_location' => null,
'departure_time' => null,
'destination' => null,
'origin' => null,
'segments' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arrival_date' => 'arrival_date',
'arrival_location' => 'arrival_location',
'arrival_time' => 'arrival_time',
'booking_class' => 'booking_class',
'departure_date' => 'departure_date',
'departure_location' => 'departure_location',
'departure_time' => 'departure_time',
'destination' => 'destination',
'origin' => 'origin',
'segments' => 'segments'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arrival_date' => 'setArrivalDate',
'arrival_location' => 'setArrivalLocation',
'arrival_time' => 'setArrivalTime',
'booking_class' => 'setBookingClass',
'departure_date' => 'setDepartureDate',
'departure_location' => 'setDepartureLocation',
'departure_time' => 'setDepartureTime',
'destination' => 'setDestination',
'origin' => 'setOrigin',
'segments' => 'setSegments'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arrival_date' => 'getArrivalDate',
'arrival_location' => 'getArrivalLocation',
'arrival_time' => 'getArrivalTime',
'booking_class' => 'getBookingClass',
'departure_date' => 'getDepartureDate',
'departure_location' => 'getDepartureLocation',
'departure_time' => 'getDepartureTime',
'destination' => 'getDestination',
'origin' => 'getOrigin',
'segments' => 'getSegments'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arrival_date'] = isset($data['arrival_date']) ? $data['arrival_date'] : null;
        $this->container['arrival_location'] = isset($data['arrival_location']) ? $data['arrival_location'] : null;
        $this->container['arrival_time'] = isset($data['arrival_time']) ? $data['arrival_time'] : null;
        $this->container['booking_class'] = isset($data['booking_class']) ? $data['booking_class'] : null;
        $this->container['departure_date'] = isset($data['departure_date']) ? $data['departure_date'] : null;
        $this->container['departure_location'] = isset($data['departure_location']) ? $data['departure_location'] : null;
        $this->container['departure_time'] = isset($data['departure_time']) ? $data['departure_time'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['segments'] = isset($data['segments']) ? $data['segments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets arrival_date
     *
     * @return string
     */
    public function getArrivalDate()
    {
        return $this->container['arrival_date'];
    }

    /**
     * Sets arrival_date
     *
     * @param string $arrival_date arrival_date
     *
     * @return $this
     */
    public function setArrivalDate($arrival_date)
    {
        $this->container['arrival_date'] = $arrival_date;

        return $this;
    }

    /**
     * Gets arrival_location
     *
     * @return \Swagger\Client\Model\FlightBookingArrivalLocation
     */
    public function getArrivalLocation()
    {
        return $this->container['arrival_location'];
    }

    /**
     * Sets arrival_location
     *
     * @param \Swagger\Client\Model\FlightBookingArrivalLocation $arrival_location arrival_location
     *
     * @return $this
     */
    public function setArrivalLocation($arrival_location)
    {
        $this->container['arrival_location'] = $arrival_location;

        return $this;
    }

    /**
     * Gets arrival_time
     *
     * @return string
     */
    public function getArrivalTime()
    {
        return $this->container['arrival_time'];
    }

    /**
     * Sets arrival_time
     *
     * @param string $arrival_time arrival_time
     *
     * @return $this
     */
    public function setArrivalTime($arrival_time)
    {
        $this->container['arrival_time'] = $arrival_time;

        return $this;
    }

    /**
     * Gets booking_class
     *
     * @return string[]
     */
    public function getBookingClass()
    {
        return $this->container['booking_class'];
    }

    /**
     * Sets booking_class
     *
     * @param string[] $booking_class booking_class
     *
     * @return $this
     */
    public function setBookingClass($booking_class)
    {
        $this->container['booking_class'] = $booking_class;

        return $this;
    }

    /**
     * Gets departure_date
     *
     * @return string
     */
    public function getDepartureDate()
    {
        return $this->container['departure_date'];
    }

    /**
     * Sets departure_date
     *
     * @param string $departure_date departure_date
     *
     * @return $this
     */
    public function setDepartureDate($departure_date)
    {
        $this->container['departure_date'] = $departure_date;

        return $this;
    }

    /**
     * Gets departure_location
     *
     * @return \Swagger\Client\Model\FlightBookingArrivalLocation
     */
    public function getDepartureLocation()
    {
        return $this->container['departure_location'];
    }

    /**
     * Sets departure_location
     *
     * @param \Swagger\Client\Model\FlightBookingArrivalLocation $departure_location departure_location
     *
     * @return $this
     */
    public function setDepartureLocation($departure_location)
    {
        $this->container['departure_location'] = $departure_location;

        return $this;
    }

    /**
     * Gets departure_time
     *
     * @return string
     */
    public function getDepartureTime()
    {
        return $this->container['departure_time'];
    }

    /**
     * Sets departure_time
     *
     * @param string $departure_time departure_time
     *
     * @return $this
     */
    public function setDepartureTime($departure_time)
    {
        $this->container['departure_time'] = $departure_time;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string $destination destination
     *
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets segments
     *
     * @return \Swagger\Client\Model\FlightBookingSegments[]
     */
    public function getSegments()
    {
        return $this->container['segments'];
    }

    /**
     * Sets segments
     *
     * @param \Swagger\Client\Model\FlightBookingSegments[] $segments segments
     *
     * @return $this
     */
    public function setSegments($segments)
    {
        $this->container['segments'] = $segments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
