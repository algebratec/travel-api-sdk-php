<?php
/**
 * FlightAvailabilityRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightAvailabilityRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightAvailabilityRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlightAvailabilityRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'language' => 'string',
'bounds' => '\Swagger\Client\Model\FlightAvailabilityRequestBound[]',
'cabin_class' => 'string',
'trip_type' => 'string',
'flexible' => 'bool',
'range' => 'int',
'nr_of_adult' => 'int',
'nr_of_child' => 'int',
'nr_of_infant' => 'int',
'nr_of_infant_with_seat' => 'int',
'nr_of_senior' => 'int',
'nr_of_youth' => 'int',
'direct_flight' => 'bool',
'with_baggage' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'language' => null,
'bounds' => null,
'cabin_class' => null,
'trip_type' => null,
'flexible' => null,
'range' => null,
'nr_of_adult' => null,
'nr_of_child' => null,
'nr_of_infant' => null,
'nr_of_infant_with_seat' => null,
'nr_of_senior' => null,
'nr_of_youth' => null,
'direct_flight' => null,
'with_baggage' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'language' => 'language',
'bounds' => 'bounds',
'cabin_class' => 'cabinClass',
'trip_type' => 'tripType',
'flexible' => 'flexible',
'range' => 'range',
'nr_of_adult' => 'nrOfAdult',
'nr_of_child' => 'nrOfChild',
'nr_of_infant' => 'nrOfInfant',
'nr_of_infant_with_seat' => 'nrOfInfantWithSeat',
'nr_of_senior' => 'nrOfSenior',
'nr_of_youth' => 'nrOfYouth',
'direct_flight' => 'directFlight',
'with_baggage' => 'withBaggage'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'language' => 'setLanguage',
'bounds' => 'setBounds',
'cabin_class' => 'setCabinClass',
'trip_type' => 'setTripType',
'flexible' => 'setFlexible',
'range' => 'setRange',
'nr_of_adult' => 'setNrOfAdult',
'nr_of_child' => 'setNrOfChild',
'nr_of_infant' => 'setNrOfInfant',
'nr_of_infant_with_seat' => 'setNrOfInfantWithSeat',
'nr_of_senior' => 'setNrOfSenior',
'nr_of_youth' => 'setNrOfYouth',
'direct_flight' => 'setDirectFlight',
'with_baggage' => 'setWithBaggage'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'language' => 'getLanguage',
'bounds' => 'getBounds',
'cabin_class' => 'getCabinClass',
'trip_type' => 'getTripType',
'flexible' => 'getFlexible',
'range' => 'getRange',
'nr_of_adult' => 'getNrOfAdult',
'nr_of_child' => 'getNrOfChild',
'nr_of_infant' => 'getNrOfInfant',
'nr_of_infant_with_seat' => 'getNrOfInfantWithSeat',
'nr_of_senior' => 'getNrOfSenior',
'nr_of_youth' => 'getNrOfYouth',
'direct_flight' => 'getDirectFlight',
'with_baggage' => 'getWithBaggage'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LANGUAGE_EN = 'EN';
const LANGUAGE_FR = 'FR';
const LANGUAGE_AR = 'AR';
const CABIN_CLASS_M = 'M';
const CABIN_CLASS_Y = 'Y';
const CABIN_CLASS_W = 'W';
const CABIN_CLASS_C = 'C';
const CABIN_CLASS_F = 'F';
const TRIP_TYPE_RT = 'rt';
const TRIP_TYPE_OW = 'ow';
const TRIP_TYPE_MD = 'md';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_EN,
self::LANGUAGE_FR,
self::LANGUAGE_AR,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCabinClassAllowableValues()
    {
        return [
            self::CABIN_CLASS_M,
self::CABIN_CLASS_Y,
self::CABIN_CLASS_W,
self::CABIN_CLASS_C,
self::CABIN_CLASS_F,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTripTypeAllowableValues()
    {
        return [
            self::TRIP_TYPE_RT,
self::TRIP_TYPE_OW,
self::TRIP_TYPE_MD,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['bounds'] = isset($data['bounds']) ? $data['bounds'] : null;
        $this->container['cabin_class'] = isset($data['cabin_class']) ? $data['cabin_class'] : null;
        $this->container['trip_type'] = isset($data['trip_type']) ? $data['trip_type'] : null;
        $this->container['flexible'] = isset($data['flexible']) ? $data['flexible'] : null;
        $this->container['range'] = isset($data['range']) ? $data['range'] : null;
        $this->container['nr_of_adult'] = isset($data['nr_of_adult']) ? $data['nr_of_adult'] : null;
        $this->container['nr_of_child'] = isset($data['nr_of_child']) ? $data['nr_of_child'] : null;
        $this->container['nr_of_infant'] = isset($data['nr_of_infant']) ? $data['nr_of_infant'] : null;
        $this->container['nr_of_infant_with_seat'] = isset($data['nr_of_infant_with_seat']) ? $data['nr_of_infant_with_seat'] : null;
        $this->container['nr_of_senior'] = isset($data['nr_of_senior']) ? $data['nr_of_senior'] : null;
        $this->container['nr_of_youth'] = isset($data['nr_of_youth']) ? $data['nr_of_youth'] : null;
        $this->container['direct_flight'] = isset($data['direct_flight']) ? $data['direct_flight'] : null;
        $this->container['with_baggage'] = isset($data['with_baggage']) ? $data['with_baggage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'language', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCabinClassAllowableValues();
        if (!is_null($this->container['cabin_class']) && !in_array($this->container['cabin_class'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cabin_class', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTripTypeAllowableValues();
        if (!is_null($this->container['trip_type']) && !in_array($this->container['trip_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'trip_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language EN = English <br> FR = French <br> AR = Arabic
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($language) && !in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'language', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets bounds
     *
     * @return \Swagger\Client\Model\FlightAvailabilityRequestBound[]
     */
    public function getBounds()
    {
        return $this->container['bounds'];
    }

    /**
     * Sets bounds
     *
     * @param \Swagger\Client\Model\FlightAvailabilityRequestBound[] $bounds bounds
     *
     * @return $this
     */
    public function setBounds($bounds)
    {
        $this->container['bounds'] = $bounds;

        return $this;
    }

    /**
     * Gets cabin_class
     *
     * @return string
     */
    public function getCabinClass()
    {
        return $this->container['cabin_class'];
    }

    /**
     * Sets cabin_class
     *
     * @param string $cabin_class M = ECONOMY STANDARD <br> Y = ECONOMY <br> W = ECONOMY PREMIUM <br> C = BUSINESS <br> F = FIRST
     *
     * @return $this
     */
    public function setCabinClass($cabin_class)
    {
        $allowedValues = $this->getCabinClassAllowableValues();
        if (!is_null($cabin_class) && !in_array($cabin_class, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cabin_class', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cabin_class'] = $cabin_class;

        return $this;
    }

    /**
     * Gets trip_type
     *
     * @return string
     */
    public function getTripType()
    {
        return $this->container['trip_type'];
    }

    /**
     * Sets trip_type
     *
     * @param string $trip_type rt = Roundtrip <br> ow = Oneway <br> md = multidestination
     *
     * @return $this
     */
    public function setTripType($trip_type)
    {
        $allowedValues = $this->getTripTypeAllowableValues();
        if (!is_null($trip_type) && !in_array($trip_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'trip_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trip_type'] = $trip_type;

        return $this;
    }

    /**
     * Gets flexible
     *
     * @return bool
     */
    public function getFlexible()
    {
        return $this->container['flexible'];
    }

    /**
     * Sets flexible
     *
     * @param bool $flexible flexible
     *
     * @return $this
     */
    public function setFlexible($flexible)
    {
        $this->container['flexible'] = $flexible;

        return $this;
    }

    /**
     * Gets range
     *
     * @return int
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param int $range range
     *
     * @return $this
     */
    public function setRange($range)
    {
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets nr_of_adult
     *
     * @return int
     */
    public function getNrOfAdult()
    {
        return $this->container['nr_of_adult'];
    }

    /**
     * Sets nr_of_adult
     *
     * @param int $nr_of_adult nr_of_adult
     *
     * @return $this
     */
    public function setNrOfAdult($nr_of_adult)
    {
        $this->container['nr_of_adult'] = $nr_of_adult;

        return $this;
    }

    /**
     * Gets nr_of_child
     *
     * @return int
     */
    public function getNrOfChild()
    {
        return $this->container['nr_of_child'];
    }

    /**
     * Sets nr_of_child
     *
     * @param int $nr_of_child nr_of_child
     *
     * @return $this
     */
    public function setNrOfChild($nr_of_child)
    {
        $this->container['nr_of_child'] = $nr_of_child;

        return $this;
    }

    /**
     * Gets nr_of_infant
     *
     * @return int
     */
    public function getNrOfInfant()
    {
        return $this->container['nr_of_infant'];
    }

    /**
     * Sets nr_of_infant
     *
     * @param int $nr_of_infant nr_of_infant
     *
     * @return $this
     */
    public function setNrOfInfant($nr_of_infant)
    {
        $this->container['nr_of_infant'] = $nr_of_infant;

        return $this;
    }

    /**
     * Gets nr_of_infant_with_seat
     *
     * @return int
     */
    public function getNrOfInfantWithSeat()
    {
        return $this->container['nr_of_infant_with_seat'];
    }

    /**
     * Sets nr_of_infant_with_seat
     *
     * @param int $nr_of_infant_with_seat nr_of_infant_with_seat
     *
     * @return $this
     */
    public function setNrOfInfantWithSeat($nr_of_infant_with_seat)
    {
        $this->container['nr_of_infant_with_seat'] = $nr_of_infant_with_seat;

        return $this;
    }

    /**
     * Gets nr_of_senior
     *
     * @return int
     */
    public function getNrOfSenior()
    {
        return $this->container['nr_of_senior'];
    }

    /**
     * Sets nr_of_senior
     *
     * @param int $nr_of_senior nr_of_senior
     *
     * @return $this
     */
    public function setNrOfSenior($nr_of_senior)
    {
        $this->container['nr_of_senior'] = $nr_of_senior;

        return $this;
    }

    /**
     * Gets nr_of_youth
     *
     * @return int
     */
    public function getNrOfYouth()
    {
        return $this->container['nr_of_youth'];
    }

    /**
     * Sets nr_of_youth
     *
     * @param int $nr_of_youth nr_of_youth
     *
     * @return $this
     */
    public function setNrOfYouth($nr_of_youth)
    {
        $this->container['nr_of_youth'] = $nr_of_youth;

        return $this;
    }

    /**
     * Gets direct_flight
     *
     * @return bool
     */
    public function getDirectFlight()
    {
        return $this->container['direct_flight'];
    }

    /**
     * Sets direct_flight
     *
     * @param bool $direct_flight if true, the system will reply with direct flights only
     *
     * @return $this
     */
    public function setDirectFlight($direct_flight)
    {
        $this->container['direct_flight'] = $direct_flight;

        return $this;
    }

    /**
     * Gets with_baggage
     *
     * @return bool
     */
    public function getWithBaggage()
    {
        return $this->container['with_baggage'];
    }

    /**
     * Sets with_baggage
     *
     * @param bool $with_baggage if true, the system will reply with recommendations with baggage only
     *
     * @return $this
     */
    public function setWithBaggage($with_baggage)
    {
        $this->container['with_baggage'] = $with_baggage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
