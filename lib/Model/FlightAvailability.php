<?php
/**
 * FlightAvailability
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Algebratec API
 *
 * Learn and test our api with ease
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@algebratec.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightAvailability Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightAvailability implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlightAvailability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'airline_dictionary' => '\Swagger\Client\Model\FlightAirline[]',
'airport_dictionary' => '\Swagger\Client\Model\FlightAirport[]',
'best_price' => 'int',
'currency' => 'string',
'flight_need_exchange_documents' => 'bool',
'group_of_flights' => '\Swagger\Client\Model\FlightAvailabilityGroupOfFlights',
'is_domestic_flight' => 'bool',
'recommendations' => '\Swagger\Client\Model\FlightRecommendation[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'airline_dictionary' => null,
'airport_dictionary' => null,
'best_price' => null,
'currency' => null,
'flight_need_exchange_documents' => null,
'group_of_flights' => null,
'is_domestic_flight' => null,
'recommendations' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'airline_dictionary' => 'airlineDictionary',
'airport_dictionary' => 'airportDictionary',
'best_price' => 'bestPrice',
'currency' => 'currency',
'flight_need_exchange_documents' => 'flightNeedExchangeDocuments',
'group_of_flights' => 'groupOfFlights',
'is_domestic_flight' => 'isDomesticFlight',
'recommendations' => 'recommendations'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'airline_dictionary' => 'setAirlineDictionary',
'airport_dictionary' => 'setAirportDictionary',
'best_price' => 'setBestPrice',
'currency' => 'setCurrency',
'flight_need_exchange_documents' => 'setFlightNeedExchangeDocuments',
'group_of_flights' => 'setGroupOfFlights',
'is_domestic_flight' => 'setIsDomesticFlight',
'recommendations' => 'setRecommendations'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'airline_dictionary' => 'getAirlineDictionary',
'airport_dictionary' => 'getAirportDictionary',
'best_price' => 'getBestPrice',
'currency' => 'getCurrency',
'flight_need_exchange_documents' => 'getFlightNeedExchangeDocuments',
'group_of_flights' => 'getGroupOfFlights',
'is_domestic_flight' => 'getIsDomesticFlight',
'recommendations' => 'getRecommendations'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['airline_dictionary'] = isset($data['airline_dictionary']) ? $data['airline_dictionary'] : null;
        $this->container['airport_dictionary'] = isset($data['airport_dictionary']) ? $data['airport_dictionary'] : null;
        $this->container['best_price'] = isset($data['best_price']) ? $data['best_price'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['flight_need_exchange_documents'] = isset($data['flight_need_exchange_documents']) ? $data['flight_need_exchange_documents'] : null;
        $this->container['group_of_flights'] = isset($data['group_of_flights']) ? $data['group_of_flights'] : null;
        $this->container['is_domestic_flight'] = isset($data['is_domestic_flight']) ? $data['is_domestic_flight'] : null;
        $this->container['recommendations'] = isset($data['recommendations']) ? $data['recommendations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets airline_dictionary
     *
     * @return \Swagger\Client\Model\FlightAirline[]
     */
    public function getAirlineDictionary()
    {
        return $this->container['airline_dictionary'];
    }

    /**
     * Sets airline_dictionary
     *
     * @param \Swagger\Client\Model\FlightAirline[] $airline_dictionary airline_dictionary
     *
     * @return $this
     */
    public function setAirlineDictionary($airline_dictionary)
    {
        $this->container['airline_dictionary'] = $airline_dictionary;

        return $this;
    }

    /**
     * Gets airport_dictionary
     *
     * @return \Swagger\Client\Model\FlightAirport[]
     */
    public function getAirportDictionary()
    {
        return $this->container['airport_dictionary'];
    }

    /**
     * Sets airport_dictionary
     *
     * @param \Swagger\Client\Model\FlightAirport[] $airport_dictionary airport_dictionary
     *
     * @return $this
     */
    public function setAirportDictionary($airport_dictionary)
    {
        $this->container['airport_dictionary'] = $airport_dictionary;

        return $this;
    }

    /**
     * Gets best_price
     *
     * @return int
     */
    public function getBestPrice()
    {
        return $this->container['best_price'];
    }

    /**
     * Sets best_price
     *
     * @param int $best_price best_price
     *
     * @return $this
     */
    public function setBestPrice($best_price)
    {
        $this->container['best_price'] = $best_price;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets flight_need_exchange_documents
     *
     * @return bool
     */
    public function getFlightNeedExchangeDocuments()
    {
        return $this->container['flight_need_exchange_documents'];
    }

    /**
     * Sets flight_need_exchange_documents
     *
     * @param bool $flight_need_exchange_documents flight_need_exchange_documents
     *
     * @return $this
     */
    public function setFlightNeedExchangeDocuments($flight_need_exchange_documents)
    {
        $this->container['flight_need_exchange_documents'] = $flight_need_exchange_documents;

        return $this;
    }

    /**
     * Gets group_of_flights
     *
     * @return \Swagger\Client\Model\FlightAvailabilityGroupOfFlights
     */
    public function getGroupOfFlights()
    {
        return $this->container['group_of_flights'];
    }

    /**
     * Sets group_of_flights
     *
     * @param \Swagger\Client\Model\FlightAvailabilityGroupOfFlights $group_of_flights group_of_flights
     *
     * @return $this
     */
    public function setGroupOfFlights($group_of_flights)
    {
        $this->container['group_of_flights'] = $group_of_flights;

        return $this;
    }

    /**
     * Gets is_domestic_flight
     *
     * @return bool
     */
    public function getIsDomesticFlight()
    {
        return $this->container['is_domestic_flight'];
    }

    /**
     * Sets is_domestic_flight
     *
     * @param bool $is_domestic_flight is_domestic_flight
     *
     * @return $this
     */
    public function setIsDomesticFlight($is_domestic_flight)
    {
        $this->container['is_domestic_flight'] = $is_domestic_flight;

        return $this;
    }

    /**
     * Gets recommendations
     *
     * @return \Swagger\Client\Model\FlightRecommendation[]
     */
    public function getRecommendations()
    {
        return $this->container['recommendations'];
    }

    /**
     * Sets recommendations
     *
     * @param \Swagger\Client\Model\FlightRecommendation[] $recommendations recommendations
     *
     * @return $this
     */
    public function setRecommendations($recommendations)
    {
        $this->container['recommendations'] = $recommendations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
